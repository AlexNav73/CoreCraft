
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace compilation.AnotherModelFile
{
    using Navitski.Crystalized.Model.Engine;
    using Navitski.Crystalized.Model.Engine.Core;
    using Navitski.Crystalized.Model.Engine.ChangesTracking;
    using Navitski.Crystalized.Model.Engine.Persistence;
    using compilation.AnotherModelFile.Entities;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal interface IFakeModelShard : IModelShard
    {
        ICollection<FirstEntity, FirstEntityProperties> FirstCollection { get; }
        ICollection<SecondEntity, SecondEntityProperties> SecondCollection { get; }

        IRelation<FirstEntity, SecondEntity> OneToOneRelation { get; }
        IRelation<FirstEntity, SecondEntity> OneToManyRelation { get; }
        IRelation<FirstEntity, SecondEntity> ManyToOneRelation { get; }
        IRelation<FirstEntity, SecondEntity> ManyToManyRelation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal interface IMutableFakeModelShard : IModelShard
    {
        IMutableCollection<FirstEntity, FirstEntityProperties> FirstCollection { get; }
        IMutableCollection<SecondEntity, SecondEntityProperties> SecondCollection { get; }

        IMutableRelation<FirstEntity, SecondEntity> OneToOneRelation { get; }
        IMutableRelation<FirstEntity, SecondEntity> OneToManyRelation { get; }
        IMutableRelation<FirstEntity, SecondEntity> ManyToOneRelation { get; }
        IMutableRelation<FirstEntity, SecondEntity> ManyToManyRelation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    internal sealed partial class FakeModelShard : IFakeModelShard
    {
        public FakeModelShard()
        {
            FirstCollection = new Collection<FirstEntity, FirstEntityProperties>(id => new FirstEntity(id), () => new FirstEntityProperties());
            SecondCollection = new Collection<SecondEntity, SecondEntityProperties>(id => new SecondEntity(id), () => new SecondEntityProperties());

            OneToOneRelation = new Relation<FirstEntity, SecondEntity>(new OneToOne<FirstEntity, SecondEntity>(), new OneToOne<SecondEntity, FirstEntity>());
            OneToManyRelation = new Relation<FirstEntity, SecondEntity>(new OneToMany<FirstEntity, SecondEntity>(), new OneToOne<SecondEntity, FirstEntity>());
            ManyToOneRelation = new Relation<FirstEntity, SecondEntity>(new OneToOne<FirstEntity, SecondEntity>(), new OneToMany<SecondEntity, FirstEntity>());
            ManyToManyRelation = new Relation<FirstEntity, SecondEntity>(new OneToMany<FirstEntity, SecondEntity>(), new OneToMany<SecondEntity, FirstEntity>());
        }

        public ICollection<FirstEntity, FirstEntityProperties> FirstCollection { get; private set; }
        public ICollection<SecondEntity, SecondEntityProperties> SecondCollection { get; private set; }

        public IRelation<FirstEntity, SecondEntity> OneToOneRelation { get; private set; }
        public IRelation<FirstEntity, SecondEntity> OneToManyRelation { get; private set; }
        public IRelation<FirstEntity, SecondEntity> ManyToOneRelation { get; private set; }
        public IRelation<FirstEntity, SecondEntity> ManyToManyRelation { get; private set; }
    }

    internal sealed partial class FakeModelShard : ICopy<IModelShard>
    {
        public IModelShard Copy()
        {
            var firstcollection = FirstCollection.Copy();
            var secondcollection = SecondCollection.Copy();

            var onetoonerelation = OneToOneRelation.Copy();
            var onetomanyrelation = OneToManyRelation.Copy();
            var manytoonerelation = ManyToOneRelation.Copy();
            var manytomanyrelation = ManyToManyRelation.Copy();

            return new FakeModelShard()
            {
                FirstCollection = firstcollection,
                SecondCollection = secondcollection,

                OneToOneRelation = onetoonerelation,
                OneToManyRelation = onetomanyrelation,
                ManyToOneRelation = manytoonerelation,
                ManyToManyRelation = manytomanyrelation,
            };
        }
    }

    internal sealed partial class FakeModelShard : ITrackableModelShard<IMutableFakeModelShard>
    {
        public IMutableFakeModelShard AsTrackable(IWritableModelChanges modelChanges)
        {
            var frame = modelChanges.Register(new FakeChangesFrame());
            return new TrackableFakeModelShard(this, frame);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal interface IFakeChangesFrame : IChangesFrame
    {
        ICollectionChangeSet<FirstEntity, FirstEntityProperties> FirstCollection { get; }
        ICollectionChangeSet<SecondEntity, SecondEntityProperties> SecondCollection { get; }

        IRelationChangeSet<FirstEntity, SecondEntity> OneToOneRelation { get; }
        IRelationChangeSet<FirstEntity, SecondEntity> OneToManyRelation { get; }
        IRelationChangeSet<FirstEntity, SecondEntity> ManyToOneRelation { get; }
        IRelationChangeSet<FirstEntity, SecondEntity> ManyToManyRelation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    internal sealed class FakeChangesFrame : IFakeChangesFrame, IWritableChangesFrame
    {
        public FakeChangesFrame()
        {
            FirstCollection = new CollectionChangeSet<FirstEntity, FirstEntityProperties>();
            SecondCollection = new CollectionChangeSet<SecondEntity, SecondEntityProperties>();

            OneToOneRelation = new RelationChangeSet<FirstEntity, SecondEntity>();
            OneToManyRelation = new RelationChangeSet<FirstEntity, SecondEntity>();
            ManyToOneRelation = new RelationChangeSet<FirstEntity, SecondEntity>();
            ManyToManyRelation = new RelationChangeSet<FirstEntity, SecondEntity>();
        }

        public ICollectionChangeSet<FirstEntity, FirstEntityProperties> FirstCollection { get; private set; }
        public ICollectionChangeSet<SecondEntity, SecondEntityProperties> SecondCollection { get; private set; }

        public IRelationChangeSet<FirstEntity, SecondEntity> OneToOneRelation { get; private set; }
        public IRelationChangeSet<FirstEntity, SecondEntity> OneToManyRelation { get; private set; }
        public IRelationChangeSet<FirstEntity, SecondEntity> ManyToOneRelation { get; private set; }
        public IRelationChangeSet<FirstEntity, SecondEntity> ManyToManyRelation { get; private set; }

        public IWritableChangesFrame Invert()
        {
            return new FakeChangesFrame()
            {
                FirstCollection = FirstCollection.Invert(),
                SecondCollection = SecondCollection.Invert(),

                OneToOneRelation = OneToOneRelation.Invert(),
                OneToManyRelation = OneToManyRelation.Invert(),
                ManyToOneRelation = ManyToOneRelation.Invert(),
                ManyToManyRelation = ManyToManyRelation.Invert(),
            };
        }

        public void Apply(IModel model)
        {
            var modelShard = model.Shard<IFakeModelShard>();

            OneToOneRelation.Apply((IMutableRelation<FirstEntity, SecondEntity>)modelShard.OneToOneRelation);
            OneToManyRelation.Apply((IMutableRelation<FirstEntity, SecondEntity>)modelShard.OneToManyRelation);
            ManyToOneRelation.Apply((IMutableRelation<FirstEntity, SecondEntity>)modelShard.ManyToOneRelation);
            ManyToManyRelation.Apply((IMutableRelation<FirstEntity, SecondEntity>)modelShard.ManyToManyRelation);
            FirstCollection.Apply((IMutableCollection<FirstEntity, FirstEntityProperties>)modelShard.FirstCollection);
            SecondCollection.Apply((IMutableCollection<SecondEntity, SecondEntityProperties>)modelShard.SecondCollection);
        }

        public bool HasChanges()
        {
            return FirstCollection.HasChanges() || SecondCollection.HasChanges() || OneToOneRelation.HasChanges() || OneToManyRelation.HasChanges() || ManyToOneRelation.HasChanges() || ManyToManyRelation.HasChanges();
        }

        public IWritableChangesFrame Merge(IChangesFrame frame)
        {
            var typedFrame = (FakeChangesFrame)frame;

            return new FakeChangesFrame()
            {
                FirstCollection = FirstCollection.Merge(typedFrame.FirstCollection),
                SecondCollection = SecondCollection.Merge(typedFrame.SecondCollection),

                OneToOneRelation = OneToOneRelation.Merge(typedFrame.OneToOneRelation),
                OneToManyRelation = OneToManyRelation.Merge(typedFrame.OneToManyRelation),
                ManyToOneRelation = ManyToOneRelation.Merge(typedFrame.ManyToOneRelation),
                ManyToManyRelation = ManyToManyRelation.Merge(typedFrame.ManyToManyRelation),
            };
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    internal sealed class TrackableFakeModelShard : IMutableFakeModelShard
    {
        public TrackableFakeModelShard(IFakeModelShard modelShard, IFakeChangesFrame frame)
        {
            FirstCollection = new TrackableCollection<FirstEntity, FirstEntityProperties>(frame.FirstCollection, modelShard.FirstCollection);
            SecondCollection = new TrackableCollection<SecondEntity, SecondEntityProperties>(frame.SecondCollection, modelShard.SecondCollection);

            OneToOneRelation = new TrackableRelation<FirstEntity, SecondEntity>(frame.OneToOneRelation, modelShard.OneToOneRelation);
            OneToManyRelation = new TrackableRelation<FirstEntity, SecondEntity>(frame.OneToManyRelation, modelShard.OneToManyRelation);
            ManyToOneRelation = new TrackableRelation<FirstEntity, SecondEntity>(frame.ManyToOneRelation, modelShard.ManyToOneRelation);
            ManyToManyRelation = new TrackableRelation<FirstEntity, SecondEntity>(frame.ManyToManyRelation, modelShard.ManyToManyRelation);
        }

        public IMutableCollection<FirstEntity, FirstEntityProperties> FirstCollection { get; private set; }
        public IMutableCollection<SecondEntity, SecondEntityProperties> SecondCollection { get; private set; }

        public IMutableRelation<FirstEntity, SecondEntity> OneToOneRelation { get; private set; }
        public IMutableRelation<FirstEntity, SecondEntity> OneToManyRelation { get; private set; }
        public IMutableRelation<FirstEntity, SecondEntity> ManyToOneRelation { get; private set; }
        public IMutableRelation<FirstEntity, SecondEntity> ManyToManyRelation { get; private set; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    internal sealed class FakeModelShardStorage : ModelShardStorage
    {
        public static readonly Scheme FirstCollectionScheme = new(new Property[] { new("NonNullableStringProperty", typeof(string), false), new("NullableStringProperty", typeof(string), true), new("NullableStringWithDefaultValueProperty", typeof(string), true) });
        public static readonly Scheme SecondCollectionScheme = new(new Property[] { new("IntProperty", typeof(int), false), new("BoolProperty", typeof(bool), false), new("DoubleProperty", typeof(double), false), new("FloatProperty", typeof(float), false) });

        public override void Update(IRepository repository, IModel model, IModelChanges changes)
        {
            if (changes.TryGetFrame<IFakeChangesFrame>(out var frame))
            {
                Update(repository, "Fake.FirstCollection", frame.FirstCollection, FirstCollectionScheme);
                Update(repository, "Fake.SecondCollection", frame.SecondCollection, SecondCollectionScheme);

                Update(repository, "Fake.OneToOneRelation", frame.OneToOneRelation);
                Update(repository, "Fake.OneToManyRelation", frame.OneToManyRelation);
                Update(repository, "Fake.ManyToOneRelation", frame.ManyToOneRelation);
                Update(repository, "Fake.ManyToManyRelation", frame.ManyToManyRelation);
            }
        }

        public override void Save(IRepository repository, IModel model)
        {
            var shard = model.Shard<IFakeModelShard>();

            Save(repository, "Fake.FirstCollection", shard.FirstCollection, FirstCollectionScheme);
            Save(repository, "Fake.SecondCollection", shard.SecondCollection, SecondCollectionScheme);

            Save(repository, "Fake.OneToOneRelation", shard.OneToOneRelation);
            Save(repository, "Fake.OneToManyRelation", shard.OneToManyRelation);
            Save(repository, "Fake.ManyToOneRelation", shard.ManyToOneRelation);
            Save(repository, "Fake.ManyToManyRelation", shard.ManyToManyRelation);
        }

        public override void Load(IRepository repository, IModel model)
        {
            var shard = model.Shard<IMutableFakeModelShard>();

            Load(repository, "Fake.FirstCollection", shard.FirstCollection, FirstCollectionScheme);
            Load(repository, "Fake.SecondCollection", shard.SecondCollection, SecondCollectionScheme);

            Load(repository, "Fake.OneToOneRelation", shard.OneToOneRelation, shard.FirstCollection, shard.SecondCollection);
            Load(repository, "Fake.OneToManyRelation", shard.OneToManyRelation, shard.FirstCollection, shard.SecondCollection);
            Load(repository, "Fake.ManyToOneRelation", shard.ManyToOneRelation, shard.FirstCollection, shard.SecondCollection);
            Load(repository, "Fake.ManyToManyRelation", shard.ManyToManyRelation, shard.FirstCollection, shard.SecondCollection);
        }
    }

}

namespace compilation.AnotherModelFile.Entities
{
    using Navitski.Crystalized.Model.Engine.Core;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    public sealed record FirstEntity(global::System.Guid Id) : Entity(Id)
    {
        internal FirstEntity() : this(global::System.Guid.NewGuid())
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    public sealed record FirstEntityProperties : Properties
    {
        public FirstEntityProperties()
        {
            NonNullableStringProperty = string.Empty;
        }

        public string NonNullableStringProperty { get; init; }
        public string? NullableStringProperty { get; init; }
        public string? NullableStringWithDefaultValueProperty { get; init; }

#if NET5_0_OR_GREATER
        public override FirstEntityProperties ReadFrom(IPropertiesBag bag)
#else
        public override Properties ReadFrom(IPropertiesBag bag)
#endif
        {
            return new FirstEntityProperties()
            {
                NonNullableStringProperty = bag.Read<string>("NonNullableStringProperty"),
                NullableStringProperty = bag.Read<string>("NullableStringProperty"),
                NullableStringWithDefaultValueProperty = bag.Read<string>("NullableStringWithDefaultValueProperty"),
            };
        }

        public override void WriteTo(IPropertiesBag bag)
        {
            bag.Write("NonNullableStringProperty", NonNullableStringProperty);
            bag.Write("NullableStringProperty", NullableStringProperty);
            bag.Write("NullableStringWithDefaultValueProperty", NullableStringWithDefaultValueProperty);
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    public sealed record SecondEntity(global::System.Guid Id) : Entity(Id)
    {
        internal SecondEntity() : this(global::System.Guid.NewGuid())
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    public sealed record SecondEntityProperties : Properties
    {
        public SecondEntityProperties()
        {
        }

        public int IntProperty { get; init; }
        public bool BoolProperty { get; init; }
        public double DoubleProperty { get; init; }
        public float FloatProperty { get; init; }

#if NET5_0_OR_GREATER
        public override SecondEntityProperties ReadFrom(IPropertiesBag bag)
#else
        public override Properties ReadFrom(IPropertiesBag bag)
#endif
        {
            return new SecondEntityProperties()
            {
                IntProperty = bag.Read<int>("IntProperty"),
                BoolProperty = bag.Read<bool>("BoolProperty"),
                DoubleProperty = bag.Read<double>("DoubleProperty"),
                FloatProperty = bag.Read<float>("FloatProperty"),
            };
        }

        public override void WriteTo(IPropertiesBag bag)
        {
            bag.Write("IntProperty", IntProperty);
            bag.Write("BoolProperty", BoolProperty);
            bag.Write("DoubleProperty", DoubleProperty);
            bag.Write("FloatProperty", FloatProperty);
        }

    }


}
