
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace compilation.LoadManually
{
    using CoreCraft.Core;
    using CoreCraft.ChangesTracking;
    using CoreCraft.Persistence;
    using compilation.LoadManually.Entities;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public interface IFakeModelShard : IModelShard
    {
        ICollection<FirstEntity, FirstEntityProperties> FirstCollection { get; }
        ICollection<SecondEntity, SecondEntityProperties> SecondCollection { get; }
        ICollection<ThirdEntity, ThirdEntityProperties> ThirdCollection { get; }

        IRelation<FirstEntity, SecondEntity> OneToOneRelation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public interface IMutableFakeModelShard : IMutableModelShard
    {
        IMutableCollection<FirstEntity, FirstEntityProperties> FirstCollection { get; }
        IMutableCollection<SecondEntity, SecondEntityProperties> SecondCollection { get; }
        IMutableCollection<ThirdEntity, ThirdEntityProperties> ThirdCollection { get; }

        IMutableRelation<FirstEntity, SecondEntity> OneToOneRelation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal static class FakeModelShardInfo
    {
        public static readonly CollectionInfo FirstCollectionInfo = new("Fake", "FirstCollection", new PropertyInfo[] { new("NonNullableStringProperty", typeof(string), false) });
        public static readonly CollectionInfo SecondCollectionInfo = new("Fake", "SecondCollection", new PropertyInfo[] { new("IntProperty", typeof(int), false) });
        public static readonly CollectionInfo ThirdCollectionInfo = new("Fake", "ThirdCollection", new PropertyInfo[] { new("IntProperty", typeof(int), false) });

        public static readonly RelationInfo OneToOneRelationInfo = new("Fake", "OneToOneRelation");
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal sealed partial class FakeModelShard : IFakeModelShard
    {
        public FakeModelShard()
        {
            FirstCollection = new Collection<FirstEntity, FirstEntityProperties>(
                FakeModelShardInfo.FirstCollectionInfo,
                static id => new FirstEntity(id),
                static () => new FirstEntityProperties());
            SecondCollection = new Collection<SecondEntity, SecondEntityProperties>(
                FakeModelShardInfo.SecondCollectionInfo,
                static id => new SecondEntity(id),
                static () => new SecondEntityProperties());
            ThirdCollection = new Collection<ThirdEntity, ThirdEntityProperties>(
                FakeModelShardInfo.ThirdCollectionInfo,
                static id => new ThirdEntity(id),
                static () => new ThirdEntityProperties());

            OneToOneRelation = new Relation<FirstEntity, SecondEntity>(
                FakeModelShardInfo.OneToOneRelationInfo,
                new OneToOne<FirstEntity, SecondEntity>(),
                new OneToOne<SecondEntity, FirstEntity>());
        }

        internal FakeModelShard(IMutableFakeModelShard mutable)
        {
            FirstCollection = ((IMutableState<ICollection<FirstEntity, FirstEntityProperties>>)mutable.FirstCollection).AsReadOnly();
            SecondCollection = ((IMutableState<ICollection<SecondEntity, SecondEntityProperties>>)mutable.SecondCollection).AsReadOnly();
            ThirdCollection = ((IMutableState<ICollection<ThirdEntity, ThirdEntityProperties>>)mutable.ThirdCollection).AsReadOnly();

            OneToOneRelation = ((IMutableState<IRelation<FirstEntity, SecondEntity>>)mutable.OneToOneRelation).AsReadOnly();
        }

        public ICollection<FirstEntity, FirstEntityProperties> FirstCollection { get; init; } = null!;
        public ICollection<SecondEntity, SecondEntityProperties> SecondCollection { get; init; } = null!;
        public ICollection<ThirdEntity, ThirdEntityProperties> ThirdCollection { get; init; } = null!;

        public IRelation<FirstEntity, SecondEntity> OneToOneRelation { get; init; } = null!;

        public void Save(IRepository repository)
        {
            FirstCollection.Save(repository);
            SecondCollection.Save(repository);
            ThirdCollection.Save(repository);

            OneToOneRelation.Save(repository);
        }
    }

    internal sealed partial class FakeModelShard : IReadOnlyState<IMutableFakeModelShard>
    {
        public IMutableFakeModelShard AsMutable(global::System.Collections.Generic.IEnumerable<IFeature> features)
        {
            var firstCollection = (IMutableCollection<FirstEntity, FirstEntityProperties>)FirstCollection;
            var secondCollection = (IMutableCollection<SecondEntity, SecondEntityProperties>)SecondCollection;
            var thirdCollection = (IMutableCollection<ThirdEntity, ThirdEntityProperties>)ThirdCollection;

            var oneToOneRelation = (IMutableRelation<FirstEntity, SecondEntity>)OneToOneRelation;

            foreach (var feature in features)
            {
                firstCollection = feature.Decorate(this, firstCollection);
                secondCollection = feature.Decorate(this, secondCollection);
                thirdCollection = feature.Decorate(this, thirdCollection);

                oneToOneRelation = feature.Decorate(this, oneToOneRelation);
            }

            return new MutableFakeModelShard()
            {
                FirstCollection = firstCollection,
                SecondCollection = secondCollection,
                ThirdCollection = thirdCollection,

                OneToOneRelation = oneToOneRelation,
            };
        }
    }

    internal sealed partial class FakeModelShard : IFeatureContext
    {
        IChangesFrame IFeatureContext.GetOrAddFrame(IMutableModelChanges modelChanges)
        {
            return modelChanges.Register(static () => new FakeChangesFrame());
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public interface IFakeChangesFrame : IChangesFrame
    {
        ICollectionChangeSet<FirstEntity, FirstEntityProperties> FirstCollection { get; }
        ICollectionChangeSet<SecondEntity, SecondEntityProperties> SecondCollection { get; }
        ICollectionChangeSet<ThirdEntity, ThirdEntityProperties> ThirdCollection { get; }

        IRelationChangeSet<FirstEntity, SecondEntity> OneToOneRelation { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal sealed class FakeChangesFrame : IFakeChangesFrame, IChangesFrameEx
    {
        public FakeChangesFrame()
        {
            FirstCollection = new CollectionChangeSet<FirstEntity, FirstEntityProperties>(FakeModelShardInfo.FirstCollectionInfo);
            SecondCollection = new CollectionChangeSet<SecondEntity, SecondEntityProperties>(FakeModelShardInfo.SecondCollectionInfo);
            ThirdCollection = new CollectionChangeSet<ThirdEntity, ThirdEntityProperties>(FakeModelShardInfo.ThirdCollectionInfo);

            OneToOneRelation = new RelationChangeSet<FirstEntity, SecondEntity>(FakeModelShardInfo.OneToOneRelationInfo);
        }

        public ICollectionChangeSet<FirstEntity, FirstEntityProperties> FirstCollection { get; private set; }
        public ICollectionChangeSet<SecondEntity, SecondEntityProperties> SecondCollection { get; private set; }
        public ICollectionChangeSet<ThirdEntity, ThirdEntityProperties> ThirdCollection { get; private set; }

        public IRelationChangeSet<FirstEntity, SecondEntity> OneToOneRelation { get; private set; }

        ICollectionChangeSet<TEntity, TProperty>? IChangesFrame.Get<TEntity, TProperty>(ICollection<TEntity, TProperty> collection)
        {
            if (FirstCollection.Info == collection.Info) return FirstCollection as ICollectionChangeSet<TEntity, TProperty>;
            if (SecondCollection.Info == collection.Info) return SecondCollection as ICollectionChangeSet<TEntity, TProperty>;
            if (ThirdCollection.Info == collection.Info) return ThirdCollection as ICollectionChangeSet<TEntity, TProperty>;

            throw new System.InvalidOperationException("Unable to find collection's changes set");
        }

        IRelationChangeSet<TParent, TChild>? IChangesFrame.Get<TParent, TChild>(IRelation<TParent, TChild> relation)
        {
            if (OneToOneRelation.Info == relation.Info) return OneToOneRelation as IRelationChangeSet<TParent, TChild>;

            throw new System.InvalidOperationException($"Unable to find relation's change set");
        }

        IChangesFrame IChangesFrame.Invert()
        {
            return new FakeChangesFrame()
            {
                FirstCollection = FirstCollection.Invert(),
                SecondCollection = SecondCollection.Invert(),
                ThirdCollection = ThirdCollection.Invert(),

                OneToOneRelation = OneToOneRelation.Invert(),
            };
        }

        public void Apply(IModel model)
        {
            var modelShard = model.Shard<IMutableFakeModelShard>();

            OneToOneRelation.Apply(modelShard.OneToOneRelation);
            FirstCollection.Apply(modelShard.FirstCollection);
            SecondCollection.Apply(modelShard.SecondCollection);
            ThirdCollection.Apply(modelShard.ThirdCollection);
        }

        public bool HasChanges()
        {
            return FirstCollection.HasChanges() || SecondCollection.HasChanges() || ThirdCollection.HasChanges() || OneToOneRelation.HasChanges();
        }

        public IChangesFrame Merge(IChangesFrame frame)
        {
            var typedFrame = (FakeChangesFrame)frame;

            return new FakeChangesFrame()
            {
                FirstCollection = FirstCollection.Merge(typedFrame.FirstCollection),
                SecondCollection = SecondCollection.Merge(typedFrame.SecondCollection),
                ThirdCollection = ThirdCollection.Merge(typedFrame.ThirdCollection),

                OneToOneRelation = OneToOneRelation.Merge(typedFrame.OneToOneRelation),
            };
        }

        public void Save(IRepository repository)
        {
            repository.Save(FirstCollection);
            repository.Save(SecondCollection);
            repository.Save(ThirdCollection);

            repository.Save(OneToOneRelation);
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal sealed class MutableFakeModelShard : IMutableFakeModelShard, IMutableState<IFakeModelShard>
    {
        public bool ManualLoadRequired => false;

        public IMutableCollection<FirstEntity, FirstEntityProperties> FirstCollection { get; init; } = null!;
        public IMutableCollection<SecondEntity, SecondEntityProperties> SecondCollection { get; init; } = null!;
        public IMutableCollection<ThirdEntity, ThirdEntityProperties> ThirdCollection { get; init; } = null!;

        public IMutableRelation<FirstEntity, SecondEntity> OneToOneRelation { get; init; } = null!;

        public IFakeModelShard AsReadOnly()
        {
            return new FakeModelShard(this);
        }

        public void Load(IRepository repository, bool force = false)
        {
            FirstCollection.Load(repository);
            if (force) SecondCollection.Load(repository);
            ThirdCollection.Load(repository);

            if (force) OneToOneRelation.Load(repository, FirstCollection, SecondCollection);
        }

        public void Save(IRepository repository)
        {
            FirstCollection.Save(repository);
            SecondCollection.Save(repository);
            ThirdCollection.Save(repository);

            OneToOneRelation.Save(repository);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public interface ILazyShardModelShard : IModelShard
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public interface IMutableLazyShardModelShard : IMutableModelShard
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal static class LazyShardModelShardInfo
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal sealed partial class LazyShardModelShard : ILazyShardModelShard
    {
        public LazyShardModelShard()
        {

        }

        internal LazyShardModelShard(IMutableLazyShardModelShard mutable)
        {

        }



        public void Save(IRepository repository)
        {

        }
    }

    internal sealed partial class LazyShardModelShard : IReadOnlyState<IMutableLazyShardModelShard>
    {
        public IMutableLazyShardModelShard AsMutable(global::System.Collections.Generic.IEnumerable<IFeature> features)
        {


            foreach (var feature in features)
            {

            }

            return new MutableLazyShardModelShard()
            {

            };
        }
    }

    internal sealed partial class LazyShardModelShard : IFeatureContext
    {
        IChangesFrame IFeatureContext.GetOrAddFrame(IMutableModelChanges modelChanges)
        {
            return modelChanges.Register(static () => new LazyShardChangesFrame());
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public interface ILazyShardChangesFrame : IChangesFrame
    {

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal sealed class LazyShardChangesFrame : ILazyShardChangesFrame, IChangesFrameEx
    {
        public LazyShardChangesFrame()
        {

        }



        ICollectionChangeSet<TEntity, TProperty>? IChangesFrame.Get<TEntity, TProperty>(ICollection<TEntity, TProperty> collection)
        {

            throw new System.InvalidOperationException("Unable to find collection's changes set");
        }

        IRelationChangeSet<TParent, TChild>? IChangesFrame.Get<TParent, TChild>(IRelation<TParent, TChild> relation)
        {

            throw new System.InvalidOperationException($"Unable to find relation's change set");
        }

        IChangesFrame IChangesFrame.Invert()
        {
            return new LazyShardChangesFrame()
            {

            };
        }

        public void Apply(IModel model)
        {
            var modelShard = model.Shard<IMutableLazyShardModelShard>();

        }

        public bool HasChanges()
        {
            return ;
        }

        public IChangesFrame Merge(IChangesFrame frame)
        {
            var typedFrame = (LazyShardChangesFrame)frame;

            return new LazyShardChangesFrame()
            {

            };
        }

        public void Save(IRepository repository)
        {

        }

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    internal sealed class MutableLazyShardModelShard : IMutableLazyShardModelShard, IMutableState<ILazyShardModelShard>
    {
        public bool ManualLoadRequired => true;



        public ILazyShardModelShard AsReadOnly()
        {
            return new LazyShardModelShard(this);
        }

        public void Load(IRepository repository, bool force = false)
        {

        }

        public void Save(IRepository repository)
        {

        }
    }

}

namespace compilation.LoadManually.Entities
{
    using CoreCraft.Core;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public sealed record FirstEntity(global::System.Guid Id) : Entity(Id)
    {
        internal FirstEntity() : this(global::System.Guid.NewGuid())
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public sealed partial record FirstEntityProperties : Properties
    {
        public FirstEntityProperties()
        {
            NonNullableStringProperty = string.Empty;
        }

        public string NonNullableStringProperty { get; init; }

#if NET5_0_OR_GREATER
        public override FirstEntityProperties ReadFrom(IPropertiesBag bag)
#else
        public override Properties ReadFrom(IPropertiesBag bag)
#endif
        {
            return new FirstEntityProperties()
            {
                NonNullableStringProperty = bag.Read<string>("NonNullableStringProperty"),
            };
        }

        public override void WriteTo(IPropertiesBag bag)
        {
            bag.Write("NonNullableStringProperty", NonNullableStringProperty);
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public sealed record SecondEntity(global::System.Guid Id) : Entity(Id)
    {
        internal SecondEntity() : this(global::System.Guid.NewGuid())
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public sealed partial record SecondEntityProperties : Properties
    {
        public SecondEntityProperties()
        {
        }

        public int IntProperty { get; init; }

#if NET5_0_OR_GREATER
        public override SecondEntityProperties ReadFrom(IPropertiesBag bag)
#else
        public override Properties ReadFrom(IPropertiesBag bag)
#endif
        {
            return new SecondEntityProperties()
            {
                IntProperty = bag.Read<int>("IntProperty"),
            };
        }

        public override void WriteTo(IPropertiesBag bag)
        {
            bag.Write("IntProperty", IntProperty);
        }

    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public sealed record ThirdEntity(global::System.Guid Id) : Entity(Id)
    {
        internal ThirdEntity() : this(global::System.Guid.NewGuid())
        {
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C# Source Generator", "1.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public sealed partial record ThirdEntityProperties : Properties
    {
        public ThirdEntityProperties()
        {
        }

        public int IntProperty { get; init; }

#if NET5_0_OR_GREATER
        public override ThirdEntityProperties ReadFrom(IPropertiesBag bag)
#else
        public override Properties ReadFrom(IPropertiesBag bag)
#endif
        {
            return new ThirdEntityProperties()
            {
                IntProperty = bag.Read<int>("IntProperty"),
            };
        }

        public override void WriteTo(IPropertiesBag bag)
        {
            bag.Write("IntProperty", IntProperty);
        }

    }



}
