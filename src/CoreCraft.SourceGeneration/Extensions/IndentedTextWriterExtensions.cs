namespace CoreCraft.SourceGeneration.Extensions;

internal static class IndentedTextWriterExtensions
{
    public static void Preamble(this IndentedTextWriter code)
    {
        code.WriteLine(@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");

        code.WriteLine("#nullable enable");
        code.EmptyLine();
    }

    public static void Block(this IndentedTextWriter code, Action action, bool addSemicolon = false)
    {
        code.WriteLine("{");
        code.Indent++;

        action();

        code.Indent--;
        if (!addSemicolon)
        {
            code.WriteLine("}");
        }
        else
        {
            code.WriteLine("};");
        }
    }

    public static void Interface(this IndentedTextWriter code, string name, string[] bases, Action body)
    {
        code.WriteLine($"public interface {name} : {string.Join(", ", bases)}");
        code.Block(() =>
        {
            body();
        });
    }

    public static void Class(this IndentedTextWriter code, Visibility visibility, string attributes, string name, string[] bases, Action body)
    {
        var str = visibility switch
        {
            Visibility.Implementations or Visibility.All => "public",
            _ => "internal"
        };

        code.Class(str, attributes, name, bases, body);
    }

    public static void Class(this IndentedTextWriter code, string visibility, string attributes, string name, Action body)
    {
        code.WriteLine($"{visibility} {attributes} class {name}");
        code.Block(() =>
        {
            body();
        });
    }

    public static void Class(this IndentedTextWriter code, string visibility, string attributes, string name, string[] bases, Action body)
    {
        code.WriteLine($"{visibility} {attributes} class {name} : {string.Join(", ", bases)}");
        code.Block(() =>
        {
            body();
        });
    }

    public static void NoIndent(this IndentedTextWriter code, Action<IndentedTextWriter> action)
    {
        var indent = code.Indent;
        code.Indent = 0;
        action(code);
        code.Indent = indent;
    }

    public static void WithIndent(this IndentedTextWriter code, Action<IndentedTextWriter> action)
    {
        code.Indent++;
        action(code);
        code.Indent--;
    }

    public static void EmptyLine(this IndentedTextWriter code)
    {
        code.WriteLineNoTabs(string.Empty);
    }

    public static void GeneratedClassAttributes(this IndentedTextWriter code)
    {
        code.GeneratedCodeAttribute();
        code.CompilerGeneratedCodeAttribute();
        code.DebuggerNonUserCodeAttribute();
        code.ExcludeFromCodeCoverageAttribute();
    }

    public static void GeneratedInterfaceAttributes(this IndentedTextWriter code)
    {
        code.GeneratedCodeAttribute();
        code.CompilerGeneratedCodeAttribute();
    }

    public static void GeneratedCodeAttribute(this IndentedTextWriter code)
    {
        code.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"C# Source Generator\", \"{typeof(IndentedTextWriterExtensions).Assembly.GetName().Version}\")]");
    }

    public static void CompilerGeneratedCodeAttribute(this IndentedTextWriter code)
    {
        code.WriteLine("[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]");
    }

    public static void DebuggerNonUserCodeAttribute(this IndentedTextWriter code)
    {
        code.WriteLine("[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]");
    }

    public static void ExcludeFromCodeCoverageAttribute(this IndentedTextWriter code)
    {
        code.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]");
    }
}
