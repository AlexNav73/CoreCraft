using System;
using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace PricingCalc.Model.Generators
{
    public abstract class GeneratorBase : ISourceGenerator
    {
        private static readonly DiagnosticDescriptor _descriptor = new DiagnosticDescriptor(
#pragma warning disable RS2008 // Enable analyzer release tracking
            id: "AMG001",
#pragma warning restore RS2008 // Enable analyzer release tracking
            title: "Exception occurred during generator execution",
            messageFormat: "Message: {0} StackTrace: {1}",
            category: "AMG",
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true);

        public virtual void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            try
            {
                ExecuteInternal(context);
            }
            catch (Exception ex)
            {
                context.ReportDiagnostic(Diagnostic.Create(_descriptor, Location.None, ex.Message, ex.StackTrace));
            }
        }

        protected abstract void ExecuteInternal(GeneratorExecutionContext context);

        protected void AddSourceFile(GeneratorExecutionContext context, string fileName, string content)
        {
            context.AddSource($"{fileName}.g.cs", SourceText.From(content, Encoding.UTF8));
        }

        protected void Preambula(IndentedTextWriter code)
        {
            code.WriteLine(@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");

            code.WriteLine("#nullable enable");
            EmptyLine(code);
        }

        protected void Block(IndentedTextWriter code, Action action, bool addSemicolon = false)
        {
            code.WriteLine("{");
            code.Indent++;

            action();

            code.Indent--;
            if (!addSemicolon)
            {
                code.WriteLine("}");
            }
            else
            {
                code.WriteLine("};");
            }
        }

        protected void Interface(IndentedTextWriter code, bool isInternal, string name, string[] bases, Action body)
        {
            code.WriteLine($"{Visibility(isInternal)} interface {name} : {string.Join(", ", bases)}");
            Block(code, () =>
            {
                body();
            });
        }

        protected void Class(IndentedTextWriter code, string attributes, string name, string[] bases, Action body)
        {
            code.WriteLine($"internal {attributes} class {name} : {string.Join(", ", bases)}");
            Block(code, () =>
            {
                body();
            });
        }

        protected string Property(string type, string name, string accessors)
        {
            return string.Join(" ", type, name, "{", accessors, "}").Trim();
        }

        protected void EmptyLine(IndentedTextWriter code)
        {
            code.WriteLineNoTabs(string.Empty);
        }

        protected void GeneratedCodeAttribute(IndentedTextWriter code)
        {
            code.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"C# Source Generator\", \"{typeof(GeneratorBase).Assembly.GetName().Version}\")]");
        }

        protected string Visibility(bool isInternal)
        {
            return isInternal ? "internal" : "public";
        }

        protected static string ToCamelCase(string str)
        {
            if (str != string.Empty && char.IsUpper(str[0]))
            {
                return char.ToLower(str[0]) + str.Substring(1);
            }

            return str;
        }
    }
}
